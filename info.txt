1) use static QRcode *QRcode_encodeDataReal(const unsigned char *data, int length, int version, QRecLevel level, int mqr)
2) how to find out level corresponding to size of byte chunk
3) just put output bytes to outputfile, using mask//rewrite "static int writeASCII(const QRcode *qrcode, const char *outfile, int invert)" for writing black and white instead of '#' and ' '?
4) having version of qr, qr scale and demanded frame size, check if the frame fits the ultimate code. 
	If it fits, then having level of ecc, figure out the maximum size of chunk to be encoded.
	getChunkSize(qrSizeWithoutScaling, level ecc)

multithread scheme:

filereader
dispatcher(manages pool and filereader/writer)
chunk queue
pool of workers(aggregate and create workers)
qrcodes queue
filewriter

struct _QRinput_List {
	QRencodeMode mode;
	int size;				///< Size of data chunk (byte).
	unsigned char *data;	///< Data chunk.
	BitStream *bstream;
	QRinput_List *next;
};

static QRcode *QRcode_encodeDataReal(const unsigned char *data, int length, int version, QRecLevel level, int mqr){
	QRinput input = QRinput_new2(version, level)
	{
		QRinput *input;

		if(version < 0 || version > QRSPEC_VERSION_MAX || level > QR_ECLEVEL_H) {
			errno = EINVAL;
			return NULL;
		}

		input = (QRinput *)malloc(sizeof(QRinput));
		if(input == NULL) return NULL;

		input->head = NULL;
		input->tail = NULL;
		input->version = version;
		input->level = level;
		input->mqr = 0;
		input->fnc1 = 0;

		return input;
	};

	ret = QRinput_append(input, QR_MODE_8, length, data)
	{
		QRinput_List *entry;

		entry = QRinput_List_newEntry(mode, length, data);
		if(entry == NULL) {
			return -1;
		}

		QRinput_appendEntry(input, entry);

		return 0;
	};
	QRcode* code = QRcode_encodeInput(input){
		if(input->mqr) {
			return QRcode_encodeMaskMQR(input, -1);
		} else {
			return QRcode_encodeMask(input, -1){
				int width, version;
				QRRawCode *raw;
				unsigned char *frame, *masked, *p, code, bit;
				int i, j;
				QRcode *qrcode = NULL;
				FrameFiller filler;

				if(input->mqr) {
					errno = EINVAL;
					return NULL;
				}
				if(input->version < 0 || input->version > QRSPEC_VERSION_MAX) {
					errno = EINVAL;
					return NULL;
				}
				if(input->level > QR_ECLEVEL_H) {
					errno = EINVAL;
					return NULL;
				}

				raw = QRraw_new(input){
					QRRawCode *raw;
					int spec[5], ret;

					raw = (QRRawCode *)malloc(sizeof(QRRawCode));
					if(raw == NULL) return NULL;

					raw->datacode = QRinput_getByteStream(input);
					if(raw->datacode == NULL) {
						free(raw);
						return NULL;
					}

					QRspec_getEccSpec(input->version, input->level, spec){
						int b1, b2;
						int data, ecc;

						b1 = eccTable[version][level][0];
						b2 = eccTable[version][level][1];
						data = QRspec_getDataLength(version, level){
							return qrspecCapacity[version].words - qrspecCapacity[version].ec[level];
						};
						
						ecc  = QRspec_getECCLength(version, level)
						{
							return qrspecCapacity[version].ec[level];
						};

						if(b2 == 0) {
							spec[0] = b1;
							spec[1] = data / b1;
							spec[2] = ecc / b1;
							spec[3] = spec[4] = 0;
						} else {
							spec[0] = b1;
							spec[1] = data / (b1 + b2);
							spec[2] = ecc  / (b1 + b2);
							spec[3] = b2;
							spec[4] = spec[1] + 1;
						}
					};

					raw->version = input->version;
					raw->b1 = QRspec_rsBlockNum1(spec);//spec[0]
					raw->dataLength = QRspec_rsDataLength(spec);//spec[0]*spec[1] + spec[3]*spec[4]
					raw->eccLength = QRspec_rsEccLength(spec);//(spec[0] + spec[3]) * spec[2]
					raw->ecccode = (unsigned char *)malloc(raw->eccLength);
					if(raw->ecccode == NULL) {//if failed, then no qr code is generated at all
						free(raw->datacode);
						free(raw);
						return NULL;
					}

					raw->blocks = QRspec_rsBlockNum(spec);
					raw->rsblock = (RSblock *)calloc(raw->blocks, sizeof(RSblock));
					if(raw->rsblock == NULL) {
						QRraw_free(raw);
						return NULL;
					}
					ret = RSblock_init(raw->rsblock, spec, raw->datacode, raw->ecccode);
					if(ret < 0) {
						QRraw_free(raw);
						return NULL;
					}

					raw->count = 0;

					return raw;
				};
				if(raw == NULL) return NULL;

				version = raw->version;
				width = QRspec_getWidth(version);
				frame = QRspec_newFrame(version);
				if(frame == NULL) {//If only malloc failed to allocate width*width bytes
					QRraw_free(raw);
					return NULL;
				}
				FrameFiller_set(&filler, width, frame, 0)
				{
					filler->width = width;
					filler->frame = frame;
					filler->x = width - 1;
					filler->y = width - 1;
					filler->dir = -1;
					filler->bit = -1;
					filler->mqr = mqr;
				};

				/* interleaved data and ecc codes */
				for(i = 0; i < raw->dataLength + raw->eccLength; i++) {
					code = QRraw_getCode(raw);
					bit = 0x80;
					for(j = 0; j < 8; j++) {
						p = FrameFiller_next(&filler);
						if(p == NULL)  goto EXIT;
						*p = 0x02 | ((bit & code) != 0);
						bit = bit >> 1;
					}
				}
				QRraw_free(raw);
				raw = NULL;
				/* remainder bits */
				j = QRspec_getRemainder(version);
				for(i = 0; i < j; i++) {
					p = FrameFiller_next(&filler);
					if(p == NULL)  goto EXIT;
					*p = 0x02;
				}

				/* masking */
				if(mask == -2) { // just for debug purpose
					masked = (unsigned char *)malloc(width * width);
					memcpy(masked, frame, width * width);
				} else if(mask < 0) {
					masked = Mask_mask(width, frame, input->level);
				} else {
					masked = Mask_makeMask(width, frame, mask, input->level);
				}
				if(masked == NULL) {
					goto EXIT;
				}
				qrcode = QRcode_new(version, width, masked);
				if(qrcode == NULL) {
					free(masked);
				}

			EXIT:
				QRraw_free(raw);
				free(frame);
				return qrcode;
			};
		}
	};
	QRinput_free(input);
	return code;
}


4) qr_size, nBytesToEncode, version, level
qr_size(nBytesToEncode(version, level))